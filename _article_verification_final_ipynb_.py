# -*- coding: utf-8 -*-
""""article_verification_final.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SQlwvJGBcLqC6D54tHcftMJv1xcOc5Ze

# **Программа анализирует ссылку на статью и — классифицирует её.**
"""

!pip install newspaper3k

!pip install lxml nltk

import nltk
nltk.download('punkt')

!pip install lxml_html_clean

!pip install pymupdf

!pip install pymorphy2

!pip install pdfminer.six

!pip install newspaper3k ipywidgets tabulate --quiet

!pip install pan

import inspect

# Патчим inspect.getargspec , чтобы он работал через getfullargspec.
def getargspec(func):
    spec = inspect.getfullargspec(func)
    # Возвращаем 4-ку , как getargspec ( args , varargs , keywords , defaults ).
    return spec.args, spec.varargs, spec.varkw, spec.defaults

inspect.getargspec = getargspec  # Заменяем в модуле inspect.

import pymorphy2

morph = pymorphy2.MorphAnalyzer()
print("MorphAnalyzer создан успешно")

import requests
import ipywidgets as widgets
import re
import pymorphy2
import io
import matplotlib.pyplot as plt
import pandas as pd
from pdfminer.high_level import extract_text_to_fp
from pdfminer.layout import LAParams
from IPython.display import display, clear_output
from urllib.parse import urlparse
from newspaper import Article
from collections import Counter
from tabulate import tabulate
import fitz  # PyMuPDF
import matplotlib.colors as mcolors
import numpy as np

morph = pymorphy2.MorphAnalyzer()

# Добавим морфологическую обработку через pymorphy2 и сделаем , чтобы классификация учитывала все нормальные формы слов ( леммы ) , а не только точные слова из списка.

# Лемматизируем список ключевых слов для категорий один раз.
'''
Склонения ( президент → президента , президенту... )
Синонимы ( врач → доктор )
Семантически близкие слова ( грипп → ОРВИ , вакцина → прививка )
Формы слов ( например , инфляция → инфляционный )
'''
def lemmatize_word(word):
    return morph.parse(word)[0].normal_form

def lemmatize_list(words):
    return set(lemmatize_word(w) for w in words)

# Словарь тематик.
CATEGORY_KEYWORDS = {
        "Политика": [
            "президент", "правительство", "выборы", "голосование", "парламент",
            "министр", "оппозиция", "закон", "санкции", "дебаты", "власть",
            "государство", "дипломатия", "импичмент", "лобби", "коррупция"
        ],
        "Экономика": [
            "экономика", "рынок", "инфляция", "биржа", "акции", "кризис",
            "бюджет", "налог", "валюта", "доллар", "евро", "инвестиции",
            "безработица", "ВВП", "рецессия", "банк", "кредит", "финансы"
        ],
        "Наука и технологии": [
            "наука", "технологии", "исследование", "открытие", "космос",
            "искусственный интеллект", "робот", "квантовый", "генетика",
            "биотехнологии", "астрономия", "физика", "химия", "математика",
            "программирование", "гаджет", "стартап", "инновации"
        ],
        "Медицина": [
            "медицина", "здоровье", "вирус", "вакцина", "пандемия",
            "больница", "врач", "лекарство", "диагноз", "иммунитет",
            "эпидемия", "COVID", "грипп", "терапия", "хирургия", "анализ"
        ],
        "Спорт": [
            "спорт", "футбол", "матч", "чемпионат", "олимпиада", "игрок",
            "тренер", "гол", "соревнование", "теннис", "баскетбол",
            "хоккей", "плавание", "легкая атлетика", "медаль", "рекорд"
        ],
        "Культура и искусство": [
            "культура", "искусство", "кино", "музей", "выставка", "концерт",
            "музыка", "литература", "писатель", "художник", "театр",
            "архитектура", "скульптура", "опера", "балет", "фестиваль"
        ],
        "Криминал": [
            "преступление", "убийство", "кража", "арест", "суд", "полиция",
            "заложник", "терроризм", "наркотики", "контрабанда", "мошенничество",
            "разбой", "вымогательство", "побег", "розыск", "следствие"
        ],
        "Природа и экология": [
            "экология", "природа", "климат", "глобальное потепление", "загрязнение",
            "лес", "животные", "заповедник", "катастрофа", "наводнение",
            "землетрясение", "ураган", "вымирание", "озон", "переработка", "эко"
        ],
        "Авто": [
            "автомобиль", "машина", "двигатель", "дорога", "ДТП", "гибрид",
            "электромобиль", "бензин", "страховка", "пробка", "ралли",
            "автогонки", "тюнинг", "кузов", "шины", "транспорт"
        ],
        "IT и компьютеры": [
            "компьютер", "смартфон", "программа", "софт", "железо", "процессор",
            "видеокарта", "кибербезопасность", "хакер", "вирус", "сеть",
            "интернет", "Wi-Fi", "игра", "стриминг", "криптовалюта", "блокчейн"
        ],
        "Космос": [
            "космос", "планета", "планеты", "спутник", "спутники", "звезда", "галактика",
            "вселенная", "астероид", "комета", "орбита", "исследование космоса",
            "телескоп", "наса", "роскосмос", "космический", "экзопланета", "космонавт",
            "миссия", "марс", "луна", "венера", "юпитер", "млечный путь"
        ],
        "Математика": [
            "математика", "уравнение", "формула", "функция", "интеграл", "производная",
            "логарифм", "колебаний", "дифференциальное", "арифметика", "алгебра",
            "геометрия", "тригонометрия", "математическая модель", "теорема",
            "число", "график", "вектор", "матрица", "решение", "доказательство",
            "логика", "анализ", "полином", "статистика", "вероятность"
        ],
        "Еда и кулинария" : [
            "кулинария", "рецепт", "блюдо", "ингредиенты", "шеф-повар", "ресторан",
            "меню", "диета", "веган", "гурман", "фастфуд", "пицца", "суши", "напитки",
            "кофе", "чай", "десерт", "гриль", "винная карта"
        ],
        "История" : [
            "история", "археология", "древний мир", "средневековье", "революция",
            "великие личности", "исторические события", "культура народов",
            "войны", "исторические источники", "монархия", "колонизация", "древнее"
        ],
        "Искусственный интеллект": [
            "искусственный интеллект", "нейросеть", "нейросети", "машинное обучение",
            "обучение с подкреплением", "нейронные сети", "ИИ", "GPT", "генеративная модель",
            "обработка естественного языка", "искусственный разум"
        ],
        "Образование": [
            "образование", "школа", "университет", "колледж", "учеба", "студент", "преподаватель", "учитель", "диплом", "экзамен", "тест", "курс", "лекция", "семинар", "дистанционное обучение", "онлайн-курс", "стипендия", "грант", "академия", "педагогика", "учебник", "образовательная программа", "факультет", "специальность"
        ],
        "Видеоигры": [
            "игры", "геймер", "консоль", "PlayStation", "Xbox", "Nintendo", "ПК", "стриминг", "киберспорт", "DLC", "мод", "открытый мир", "RPG", "шутер", "стратегия", "инди-игры", "графика", "геймплей", "патч", "раннер"
        ]
    }

# Лемматизируем все ключевые слова категорий один раз.
CATEGORY_KEYWORDS_LEMMAS = {
    cat: set(lemmatize_word(word) for word in words)
    for cat, words in CATEGORY_KEYWORDS.items()
}

# Для работы с PDF ссылками.
def extract_text_from_pdf(url):
    try:
        HEADERS = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                          "AppleWebKit/537.36 (KHTML, like Gecko) "
                          "Chrome/114.0.0.0 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
        }
        response = requests.get(url, headers=HEADERS)
        response.raise_for_status()
        output_string = io.StringIO()
        with io.BytesIO(response.content) as pdf_file:
            extract_text_to_fp(pdf_file, output_string, laparams=LAParams(), output_type='text', codec=None)
        return output_string.getvalue()
    except Exception as e:
        return None

def evaluate_text(text):
    # Создаем фейковый объект article для передачи в evaluate_article.
    class DummyArticle:
        def __init__(self, text):
            self.text = text
            self.title = text[:50]
            self.authors = []
    dummy = DummyArticle(text)
    return evaluate_article(dummy)

def analyze_article(url):
    # Проверка доступности ссылки.
    # Используется requests.head() для проверки ответа сервера.
    # Если страница не отвечает ( не 200 OK ) , то программа сообщает об ошибке.
    try:
        HEADERS = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                          "AppleWebKit/537.36 (KHTML, like Gecko) "
                          "Chrome/114.0.0.0 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
        }
        response = requests.head(url, headers=HEADERS, allow_redirects=True)
        #response = requests.head(url, allow_redirects=True)
        if response.status_code != 200:
            return {
                "error": f"Статья недоступна. Код ответа сервера: {response.status_code}",
                "response_text": response.text if hasattr(response, 'text') else ''
            }
    except requests.exceptions.RequestException as e:
        return {"error": f"Ошибка при обращении к серверу: {str(e)}"}

    # Если это прямая ссылка на PDF.
    if url.lower().endswith('.pdf'):
        text = extract_text_from_pdf(url)
        if not text or len(text) < 100:
            return {"error": "Не удалось извлечь текст из PDF или текст слишком короткий"}
        # Для PDF - заголовок можно пустым или взять первые 100 символов.
        title = text[:100].replace('\n', ' ') + "..."
        source_type = "PDF документ"
        categories = classify_text_weighted(text)
        categories_with_percent = classify_text_weighted(text)
        score = evaluate_text(text)
        return {
            "url": url,
            "title": title,
            "source": urlparse(url).netloc,
            "source_type": source_type,
            "categories": categories_with_percent[:3] if len(categories_with_percent) > 3 else categories_with_percent,
            "score": score,
        }

    # Если это сайт — пытаемся получить PDF внутри страницы.
    # Загрузка и парсинг статьи.
    # С помощью библиотеки newspaper3k загружается содержимое источника.
    # Извлекается заголовок , автор , текст.
    article = Article(url)
    article.download()
    article.parse()

    # Проверка на наличие PDF ссылок внутри страницы.
    pdf_links = re.findall(r'href=["\']([^"\']+\.pdf)["\']', article.html, re.IGNORECASE)
    if pdf_links:
        # Берем первую PDF ссылку , добавляем к базовому URL , если относительная.
        pdf_url = pdf_links[0]
        if not pdf_url.startswith('http'):
            base_url = '{uri.scheme}://{uri.netloc}'.format(uri=urlparse(url))
            pdf_url = base_url + pdf_url if pdf_url.startswith('/') else base_url + '/' + pdf_url

        text = extract_text_from_pdf(pdf_url)
        if not text or len(text) < 100:
            return {"error": "Не удалось извлечь текст из PDF или текст слишком короткий"}
        title = text[:100].replace('\n', ' ') + "..."
        source_type = "PDF документ (с сайта)"
        categories = classify_text_weighted(text)
        categories_with_percent = classify_text_weighted(text)
        score = evaluate_text(text)
        return {
            "url": pdf_url,
            "title": title,
            "source": urlparse(pdf_url).netloc,
            "source_type": source_type,
            "categories": categories_with_percent[:3] if len(categories_with_percent) > 3 else categories_with_percent,
            "score": score,
        }

    # Если PDF не найден , анализируем обычную статью.
    # Проверка: если текста мало ( <100 символов ) — это не статья или не аннотация.
    if not article.text or len(article.text) < 100:
        return {"error": "Это не статья или контент слишком короткий"}

    # Анализ источника.
    # Извлекается домен.
      # Например , bbc.com.
    # Функция classify_source() сопоставляет его с базой известных источников.
      # Например: bbc.com → Новости , arxiv.org → Научные статьи.
    domain = urlparse(url).netloc
    source_type = classify_source(domain)
    categories = classify_text_weighted(article.text)  # Классификация текста.
    score = evaluate_article(article). # Оценка.
    categories_with_percent = classify_text_weighted(article.text)
    return {
        "url": url,
        "title": article.title,
        "source": domain,
        "source_type": source_type,
        # Возвращает список категорий с приоритетом , если их больше 3 , то выводим первые 3.
        "categories": categories_with_percent[:3] if len(categories_with_percent) > 3 else categories_with_percent,
        "score": score,
    }

def classify_text_weighted(text):
    # Классификация по темам.
    # Считаются ключевые слова в тексте.
    # Используется словарь тематик ( Политика , Экономика , Медицина и так далее ).
    # Выдаются наиболее релевантные категории в порядке убывания значимости.
    text_lower = text.lower()
    words = re.findall(r'\w+', text_lower) # Лучше через regex , чтобы убрать знаки пунктуации.
    lemmas = [lemmatize_word(w) for w in words]
    word_counts = Counter(lemmas)

    category_scores = {}
    for category, keywords_lemmas in CATEGORY_KEYWORDS_LEMMAS.items():
        score = sum(word_counts.get(keyword, 0) for keyword in keywords_lemmas)
        if score > 0:
            category_scores[category] = score

    # Сортируем категории по убыванию.
    sorted_categories = sorted(category_scores.items(), key=lambda x: x[1], reverse=True)

    total_score = sum(category_scores.values()) or 1  # чтобы не делить на 0.

    result = []
    for cat, score in sorted_categories:
        percent = round(score / total_score * 100, 1)
        result.append({"category": cat, "score": score, "percent": percent})

    return result

# Список известных доменов.
def classify_source(domain):
    known_sources = {
        "bbc.com": "Новости",
        "elibrary.ru": "Научаная электронная библиотека",
        "znanierussia.ru": "Электронная энциклопедия",
        "cyberleninka.ru": "Научная электронная библиотека",
        "ru.wikipedia.org": "Википедия",
        "mel.fm": "Образование и воспитание",
        "edutainme.ru": "Образовательные технологии",
        "postnauka.ru": "Научно-популярные материалы",
        "stopgame.ru": "Все про игры",
        "igromania.ru":"Статьи и новости",
        "arxiv.org": "Научные статьи",
        "ria.ru": "Новости",
        "tass.ru": "Новости",
        "lenta.ru": "Новости",
        "kommersant.ru": "Деловые новости",
        "vedomosti.ru": "Деловые новости",
        "rg.ru": "Официальные публикации",
        "gazeta.ru": "Новости",
        "iz.ru": "Новости",
        "mk.ru": "Новости",
        "rbc.ru": "Экономика и бизнес",
        "novayagazeta.ru": "Журналистика/Аналитика",
        "vc.ru": "Технологии и бизнес",
        "habr.com": "IT и технологии",
        "nplus1.ru": "Наука и технологии",
        "fontanka.ru": "Региональные новости",
        "echo.msk.ru": "Медиа/Мнения",
        "znak.com": "Новости",
        "www.consultant.ru": "Правовые акты и Конституция РФ",
        "www.sports.ru": "Мир спорта",
    }
    return known_sources.get(domain, "Неизвестный источник")

# Оценка качества статьи.
'''
| Критерий                                       | Баллы |
| ---------------------------------------------- | ----- |
| Длина текста > 1500 символов                   | +2    |
| Есть автор(ы)                                  | +1    |
| Заголовок содержит более 3 слов                | +1    |
| Категорий более 1                              | +1    |
| Текст содержит хотя бы 3 абзаца                | +1    |
| В тексте есть хотя бы 1 дата или число         | +1    |
| Присутствует список источников                 | +1    |
| Присутствуют ключевые термины из топ-5 тематик | +2    |
'''
def evaluate_article(article):
    score = 0
    text = article.text.strip()

    # Длина текста.
    if len(text) > 1500:
        score += 2
    elif len(text) > 1000:
        score += 1

    # Авторы.
    if article.authors:
        score += 1

    # Заголовок.
    if len(article.title.split()) > 3:
        score += 1

    # Категорий больше одной.
    categories = classify_text_weighted(text)
    if len(categories) > 1:
        score += 1

    # Абзацы.
    if text.count('\n') >= 2:
        score += 1

    # Есть даты / числа.
    if re.search(r'\d{4}|\d{1,2}[./-]\d{1,2}', text):
        score += 1

    # Есть раздел "Источники" или похожие.
    if re.search(r'(список литературы|источники|литература|references|библиография|used sources)', text.lower()):
        score += 1

    # Тематические ключевые слова из топ-5.
    word_counts = Counter(text.lower().split())
    category_keywords = CATEGORY_KEYWORDS
    top_themes = list(Counter({
        cat: sum(word_counts.get(k, 0) for k in kws)
        for cat, kws in category_keywords.items()
    }).most_common(5))
    if any(count >= 3 for _, count in top_themes):
        score += 2

    return min(score, 10)

# Датасет размеченных статей для проверки.
test_dataset = [
    {"url": "https://www.rbc.ru/rbcfreenews/684034c29a794788ce2643b1", "true_category": "Политика"},
    {"url": "https://ru.ruwiki.ru/wiki/%D0%9E%D1%81%D0%B0%D0%B4%D0%B0_%D0%98%D0%B5%D1%80%D1%83%D1%81%D0%B0%D0%BB%D0%B8%D0%BC%D0%B0_(1187)", "true_category": "Политика"},
    {"url": "https://ru.ruwiki.ru/wiki/%D0%A4%D0%B0%D1%80%D0%B0%D0%BE%D0%BD", "true_category": "Политика"},
    {"url": "https://habr.com/ru/articles/536446/", "true_category": "Политика"},
    {"url": "http://www.jurvestnik.psu.ru/images/stories/vestnik/pdf/2009_4_6.pdf", "true_category": "Политика"},
    {"url": "https://www.bbc.com/russian/articles/c5112xml40eo", "true_category": "Политика"},

    {"url": "https://myeconomix.ru/finansy/prichiny-neeffektivnosti-sberegatelnykh-sertifikatov/", "true_category": "Экономика"},
    {"url": "https://www.rbc.ru/quote/news/article/627e10719a79476d62900ee8", "true_category": "Экономика"},
    {"url": "https://research-journal.org/archive/5-155-2025-may/10.60797/IRJ.2025.155.36", "true_category": "Экономика"},
    {"url": "https://vaael.ru/article/view?id=3214", "true_category": "Экономика"},
    {"url": "http://publishing-vak.ru/file/archive-economy-2015-5/5-prokopchuk.pdf", "true_category": "Экономика"},
    {"url": "http://publishing-vak.ru/file/archive-economy-2015-10/4-kabir-yakovlev-nikulina.pdf", "true_category": "Экономика"},

    {"url": "https://ria.ru/20250604/tsentry-2020848140.html", "true_category": "Наука и технологии"},
    {"url": "https://sibac.info/journal/student/317/379439", "true_category": "Наука и технологии"},
    {"url": "https://research-journal.org/archive/6-156-2025-june/10.60797/IRJ.2025.156.68", "true_category": "Наука и технологии"},
    {"url": "https://moluch.ru/archive/483/105878/", "true_category": "Наука и технологии"},
    {"url": "https://sibac.info/journal/student/317/379418", "true_category": "Наука и технологии"},
    {"url": "https://sibac.info/studconf/science/ccxiv/378908", "true_category": "Наука и технологии"},

    {"url": "https://medkras.com/articles/vypadenie-volos-alopetsiya/", "true_category": "Медицина"},
    {"url": "https://cmclinic.ru/statii/chto-takoe-massazh.html", "true_category": "Медицина"},
    {"url": "https://tekstura.moscow/blog/sportivnyij-massazh-ili-rasslablyayushhij-kak-vyibrat-v-zavisimosti-ot-vashego-obraza-zhizni/", "true_category": "Медицина"},
    {"url": "https://research-journal.org/archive/5-155-2025-may/10.60797/IRJ.2025.155.73", "true_category": "Медицина"},
    {"url": "https://www.hse.ru/news/communication/172986695.html", "true_category": "Медицина"},
    {"url": "https://stvolkletki.ru/mass-media/view.php?media=ob-umnykh-stvolovykh-kletkakh-farmakologicheskom-fashizme-geneticheskikh-portretakh-i-russkom-mental", "true_category": "Медицина"},

    {"url": "https://www.sports.ru/football/blogs/3327923.html", "true_category": "Спорт"},
    {"url": "https://research-journal.org/archive/6-156-2025-june/10.60797/IRJ.2025.156.62", "true_category": "Спорт"},
    {"url": "https://www.sports.ru/football/blogs/3318250.html", "true_category": "Спорт"},
    {"url": "https://www.championat.com/football/article-6053816-klubnyj-chempionat-mira-2025-obzor-matchej-16-iyunya-chelsi-los-andzheles-palmejras-portu-botafogo-glavnye-sobytiya.html", "true_category": "Спорт"},
    {"url": "https://www.championat.com/cybersport/article-6035658-vse-o-blast-tv-austin-major-2025-uchastniki-format-i-raspisanie-gde-smotret-mejdzhor-po-cs-2.html", "true_category": "Спорт"},
    {"url": "https://www.sports.ru/others/blogs/2847461.html", "true_category": "Спорт"},

    {"url": "https://joseartgallery.com/ru/articles/starting-an-art-collection-on-any-budget", "true_category": "Культура и искусство"},
    {"url": "https://lenta.ru/articles/2025/06/16/gde-kupatsya-v-podmoskovie/", "true_category": "Культура и искусство"},
    {"url": "https://lenta.ru/articles/2025/06/13/labuburu/", "true_category": "Культура и искусство"},
    {"url": "https://veryimportantlot.com/ru/news/obchestvo-i-lyudi/zhivopis-drevnego-egipta-periody-i-glavnye-osobennosti", "true_category": "Культура и искусство"},
    {"url": "https://www.vedomosti.ru/esg/ecology/articles/2025/05/22/1112065-rossiya-vibiraet-ustoichivoe-buduschee", "true_category": "Культура и искусство"},
    {"url": "https://ru.wikipedia.org/wiki/%D0%9F%D0%B8%D0%BA%D0%B0%D1%81%D1%81%D0%BE,_%D0%9F%D0%B0%D0%B1%D0%BB%D0%BE", "true_category": "Культура и искусство"},

    {"url": "https://www.consultant.ru/document/cons_doc_LAW_10699/43b57d6c014e99070854acf76d1627ac9a184239/", "true_category": "Криминал"},
    {"url": "https://www.interfax.ru/russia/1018395", "true_category": "Криминал"},
    {"url": "https://tass.ru/obschestvo/12604591", "true_category": "Криминал"},
    {"url": "https://pravo.ru/story/206434/", "true_category": "Криминал"},
    {"url": "https://pravo.ru/review/view/141562/", "true_category": "Криминал"},
    {"url": "https://rg.ru/2019/10/19/reg-urfo/diavol-vo-ploti-pochemu-samye-zhestokie-prestupleniia-sovershaiut-zhenshchiny.html", "true_category": "Криминал"},

    {"url": "https://moluch.ru/young/archive/17/1226/", "true_category": "Природа и экология"},
    {"url": "https://moluch.ru/young/archive/38/2156/", "true_category": "Природа и экология"},
    {"url": "https://www.nkj.ru/archive/articles/2101/", "true_category": "Природа и экология"},
    {"url": "https://www.nkj.ru/archive/articles/25983/", "true_category": "Природа и экология"},
    {"url": "https://forest-save.ru/esg-blog/kak-pomoch-prirode", "true_category": "Природа и экология"},
    {"url": "https://www.biosfera92.ru/poleznye-stati/problemy-ekologii-v-sovremennom-mire", "true_category": "Природа и экология"},

    {"url": "https://ru.wikipedia.org/wiki/Bugatti", "true_category": "Авто"},
    {"url": "https://www.nkj.ru/archive/articles/8206/", "true_category": "Авто"},
    {"url": "https://www.kolesa.ru/article/tormoza-ot-nissan-i-nikakogo-stoka-tiuning-toyota-cresta-gx71-dlia-rds-gp", "true_category": "Авто"},
    {"url": "https://favorit-motors.ru/articles/vybor-avtomobilya/luchshie-avto-s-probegom/", "true_category": "Авто"},
    {"url": "https://favorit-motors.ru/articles/sovety-voditelyam/kak-zashchitit-mashinu-esli-net-garazha-layfkhaki-dlya-stoyanki-na-otkrytom-vozdukhe/", "true_category": "Авто"},
    {"url": "https://favorit-motors.ru/articles/ekspluataciya-avto/kak-zashchitit-lobovoe-steklo-ot-skolov-na-trasse-prostye-layfkhaki/", "true_category": "Авто"},

    {"url": "https://www.it-world.ru/it-news/7kjetk9f6scg0s0w04s0kwo0kgckg4s.html", "true_category": "IT и компьютеры"},
    {"url": "https://vc.ru/tech/1304025-kompyuternaya-mysh-kak-poyavilsya-i-menyalsya-samyi-nuzhnyi-aksessuar-dlya-pk", "true_category": "IT и компьютеры"},
    {"url": "https://www.it-world.ru/it-news/11dsjh4hkk3k4gksg8og84o8s8okcgw.html", "true_category": "IT и компьютеры"},
    {"url": "https://habr.com/ru/companies/oleg-bunin/articles/511430/", "true_category": "IT и компьютеры"},
    {"url": "https://www.computerra.ru/316619/laboratoriya-kasperskogo-nachinaet-prodazhi-virtualnyh-sim-kart-cherez-kaspersky-esim-store/", "true_category": "IT и компьютеры"},
    {"url": "https://3dnews.ru/1124176/realme-gt-7-dream-edition-review", "true_category": "IT и компьютеры"},

    {"url": "https://iki.cosmos.ru/popular/articles/luna-25-i-drugie-missii-kak-razvivalas-otechestvennaya-lunnaya-programma", "true_category": "Космос"},
    {"url": "https://naked-science.ru/article/cosmonautics/kitaj-ozvuchil-datu-starta-lunnoj-missii-chane-6", "true_category": "Космос"},
    {"url": "https://sci-article.ru/stat.php?i=1648302071", "true_category": "Космос"},
    {"url": "https://iki.cosmos.ru/popular/articles/sedmoy-kontinent-kakie-missii-planiruyutsya-posle-luny-25", "true_category": "Космос"},
    {"url": "https://iki.cosmos.ru/popular/articles/klondayk-na-poverkhnosti-luny-voda-kaliforniy-i-geliy", "true_category": "Космос"},
    {"url": "https://www.ferra.ru/news/techlife/v-rossii-razrabotali-tekhnologiyu-obsluzhivaniya-kosmicheskoi-stancii-robotami-09-06-2025.htm", "true_category": "Космос"},

    {"url": "https://vestnik-rosnou.ru/sites/default/files/26_PDFsam_%D0%A1%D0%BB%D0%BE%D0%B6%D0%BD%D1%8B%D0%B5%20%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B%202.pdf", "true_category": "Математика"},
    {"url": "https://research-journal.org/archive/5-155-2025-may/10.60797/IRJ.2025.155.10", "true_category": "Математика"},
    {"url": "https://research-journal.org/archive/5-155-2025-may/10.60797/IRJ.2025.155.48", "true_category": "Математика"},
    {"url": "https://moluch.ru/young/archive/20/1330/", "true_category": "Математика"},
    {"url": "https://sibac.info/journal/student/313/372371", "true_category": "Математика"},
    {"url": "https://book.etudes.ru/articles/technics/", "true_category": "Математика"},

    {"url": "https://efspb.ru/blog/morozhenoe-vred-i-polza-plombira/", "true_category": "Еда и кулинария"},
    {"url": "https://eda.ru/media/recepty/kak-prigotovit-morozhenoe-doma", "true_category": "Еда и кулинария"},
    {"url": "https://eda.ru/media/recepty/5-receptov-holodnogo-kofe-dlya-zharkih-dney", "true_category": "Еда и кулинария"},
    {"url": "https://bonduelle.ru/blog/kukhnya-potomkov-vikingov.html", "true_category": "Еда и кулинария"},
    {"url": "https://food.ru/recipes/253989-ruletiki-iz-baklazhanov-po-gruzinski", "true_category": "Еда и кулинария"},
    {"url": "https://povar.ru/art/sbalansirovannoe_meniu_dlya_semi_na_rabochuiu_nedeliu_prosto_nedorogo_bystro.html", "true_category": "Еда и кулинария"},

    {"url": "https://lenta.ru/articles/2023/07/24/lausanne_treaty/", "true_category": "История"},
    {"url": "https://www.trtrussian.com/mnenie/bitva-pri-chanakkale-rozhdenie-nacii-4995603", "true_category": "История"},
    {"url": "https://research-journal.org/archive/4-154-2025-april/10.60797/IRJ.2025.154.107", "true_category": "История"},
    {"url": "https://naked-science.ru/article/column/migratsii-narodov-zapadno", "true_category": "История"},
    {"url": "https://naked-science.ru/article/history/medieval-woman-warrior", "true_category": "История"},
    {"url": "https://naked-science.ru/article/history/voluntary-enslavement", "true_category": "История"},

    {"url": "https://www.iso.org/ru/artificial-intelligence", "true_category": "Искусственный интеллект"},
    {"url": "https://www.rbc.ru/technology_and_media/20/05/2025/682c49f09a794714344f7dff", "true_category": "Искусственный интеллект"},
    {"url": "https://webiomed.ru/blog/investitsii-v-generativnyi-ii-chto-stoit-za-etoi-gonkoi/", "true_category": "Искусственный интеллект"},
    {"url": "https://www.tadviser.ru/index.php/%D0%A1%D1%82%D0%B0%D1%82%D1%8C%D1%8F:%D0%A1%D1%82%D0%B0%D0%BD%D0%B4%D0%B0%D1%80%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F_%D0%B8%D1%81%D0%BA%D1%83%D1%81%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B8%D0%BD%D1%82%D0%B5%D0%BB%D0%BB%D0%B5%D0%BA%D1%82%D0%B0", "true_category": "Искусственный интеллект"},
    {"url": "https://practicum.yandex.ru/blog/chto-takoe-iskusstvennyi-intellekt/", "true_category": "Искусственный интеллект"},
    {"url": "https://smapse.ru/poprobovali-chatgpt-kak-zamenu-repetitoru-opyt-i-vyvody/", "true_category": "Искусственный интеллект"},

    {"url": "https://sci-article.ru/stat.php?i=1721588312", "true_category": "Образование"},
    {"url": "https://sibac.info/studconf/hum/cli/379832", "true_category": "Образование"},
    {"url": "https://practicum.yandex.ru/blog/neyroset-yandexgpt-kak-polzovatsya/", "true_category": "Образование"},
    {"url": "https://daily.afisha.ru/culture/28995-kak-vybrat-luchshuyu-shkolu-dlya-rebenka-razbiraemsya-vmeste-s-ekspertom/", "true_category": "Образование"},
    {"url": "https://www.vokrugsveta.ru/vs/article/1799/", "true_category": "Образование"},
    {"url": "https://www.hse.ru/news/science/68185068.html", "true_category": "Образование"},

    {"url": "https://gabestore.ru/blog/istoriya-stanovleniya-steam?My7J3d59UDbdtPVISlqhjrK4QAoHRGtZwagw6gOYKukwJONuvI7vmyF82XHTaupSC7OLgdXep9DYtNZS8tIPDnStv1sTTellrfp0RqYcbqRA1kn5C4MEGnxI&utm_source=admitad&tagtag_uid=2eece7bd256d3be0363a7cdd4fb02171&uid=2eece7bd256d3be0363a7cdd4fb02171", "true_category": "Видеоигры"},
    {"url": "https://www.rbc.ru/life/news/684938de9a7947684b043bc3", "true_category": "Видеоигры"},
    {"url": "https://stopgame.ru/show/145910/samye_interesnye_relizy_maya", "true_category": "Видеоигры"},
    {"url": "https://stopgame.ru/newsdata/67345/sandfall_izuchaet_varianty_dlya_buduschih_kontentnyh_apdeytov_clair_obscur_expedition_33", "true_category": "Видеоигры"},
    {"url": "https://stopgame.ru/show/143626/horoshie_igry_kotorye_vy_mogli_propustit_v_fevrale", "true_category": "Видеоигры"},
    {"url": "https://stopgame.ru/newsdata/67159/koop_horror_phasmophobia_prevratyat_v_kino_silami_studii_blumhouse", "true_category": "Видеоигры"}
]

# Функция прогона по датасету. Если правильная категория не совпала с первой ( самой приоритетной ) категорией , проверить , есть ли правильная категория во второй или третьей позиции , если и там нет — значит правильной категории нет в топ-3.
def test_classifier_on_dataset(dataset):
    results = []

    for entry in dataset:
        url = entry["url"]
        true_cat = entry["true_category"]
        print(f"Анализирую: {url} (ожидается: {true_cat})")

        result = analyze_article(url)

        if "error" in result:
            print(f"Ошибка: {result['error']}")
            predicted = None
            true_pos = "4+"
        else:
            preds = [c["category"] for c in result.get("categories", [])[:3]]

            if true_cat in preds:
                true_pos = preds.index(true_cat) + 1  # 1 , 2 или 3.
            else:
                true_pos = "4+"

            predicted = preds[0] if preds else None

        correct = (true_pos == 1)

        results.append({
            "URL": url,
            "Ожидаемая категория": true_cat,
            "Предсказанная категория": predicted,
            "Совпадение": "Да" if correct else "Нет",
            "Позиция правильной категории в топ-3": true_pos
        })

    df = pd.DataFrame(results)

    print("\n📋 Таблица результатов:")
    print(tabulate(df, headers='keys', tablefmt='grid'))

    # Точность ( позиция 1 ).
    correct_count = df["Совпадение"].value_counts().get("Да", 0)
    total = len(df)
    accuracy = correct_count / total * 100

    plt.figure(figsize=(6, 4))
    plt.bar(["Совпало", "Не совпало"], [correct_count, total - correct_count], color=["green", "red"])
    plt.title(f"Точность классификации (позиция 1): {accuracy:.1f}%")
    plt.ylabel("Количество статей")
    plt.show()

    # Распределение позиций правильной категории для всех ( включая 1 ).
    # Для сортировки заменим категории на числовые для правильного порядка.
    order_map = {1: 1, 2: 2, 3: 3, "4+": 4}
    pos_counts = df["Позиция правильной категории в топ-3"].value_counts()
    pos_counts = pos_counts.reindex(sorted(pos_counts.index, key=lambda x: order_map[x]))

    # Подсчёт процентов.
    pos_percent = (pos_counts / total * 100).round(1)

    plt.figure(figsize=(7, 4))

    # Градиент жёлтых цветов от gold до khaki.
    base_color = np.array(mcolors.to_rgb("khaki"))
    light_color = np.array(mcolors.to_rgb("gold"))

    n = len(pos_percent)
    colors = [base_color + (light_color - base_color) * i/(n-1) for i in range(n)]
    colors = [mcolors.to_hex(c) for c in colors]

    bars = plt.bar(pos_percent.index.astype(str), pos_percent.values, color=colors)

    # Добавим проценты над столбиками.
    for bar, pct in zip(bars, pos_percent.values):
        plt.text(bar.get_x() + bar.get_width()/2, bar.get_height(), f"{pct}%", ha='center', va='bottom')

    plt.xlabel("Позиция правильной категории")
    plt.ylabel("Процент статей (%)")
    plt.title("Распределение правильной категории по позициям (1, 2, 3, 4+)")
    plt.ylim(0, max(pos_percent.values)*1.2)
    plt.show()

    return df

# Диаграмма резултата прогона датасета.
df_result = test_classifier_on_dataset(test_dataset)

# Пример использования.
# Результат. Программа возвращает:
  # Ссылку ;
  # Заголовок ;
  # Источник и тип ;
  # Список категорий ;
  # Оценку.
# Элементы интерфейса.
url_input = widgets.Text(
    placeholder='Введите ссылку на статью',
    description='Ссылка:',
    layout=widgets.Layout(width='90%')
)
analyze_button = widgets.Button(description="Анализировать", button_style='success')
stop_button = widgets.Button(description="Стоп", button_style='danger')
output = widgets.Output()

# Флаг остановки.
stop_flag = {"value": False}

def on_analyze_clicked(b):
    if stop_flag["value"]:
        with output:
            clear_output()
            print("Анализ остановлен.")
        return

    url = url_input.value.strip()
    if not url:
        with output:
            clear_output()
            print("Пожалуйста, введите ссылку.")
        return

    result = analyze_article(url)

    with output:
        print("=" * 60)
        if "error" in result:
            print("Ошибка:", result["error"])
        else:
            table = [
                ["Ссылка", result["url"]],
                ["Заголовок", result["title"]],
                ["Источник", result["source"]],
                ["Тип источника", result["source_type"]],
                ["Категории", ", ".join([f"{cat['category']} {cat['percent']}%" for cat in result["categories"]])],
                ["Оценка качества", result["score"]],
            ]
            print(tabulate(table, tablefmt="grid"))
        url_input.value = ''  # Очистить поле после анализа.

def on_stop_clicked(b):
    stop_flag["value"] = True
    with output:
        clear_output()
        print("Работа остановлена. Больше анализ не выполняется.")

# Привязка к кнопкам.
analyze_button.on_click(on_analyze_clicked)
stop_button.on_click(on_stop_clicked)

# Отображение интерфейса.
display(widgets.VBox([
    url_input,
    widgets.HBox([analyze_button, stop_button]),
    output
]))

"""# **План перехода на ML-классификатор с TF-IDF:**


---


**1. Сформировать датасет:**

Нужны примеры текстов с метками категорий — чтобы модель научилась классифицировать. Можно взять статьи , где известна категория ( например , собирать из открытых источников или вручную размечать ).

Пример структуры данных:

Текст статьи | Категория

"Президент подписал новый закон..."	Политика
"Новый смартфон с инновационным..."	IT и компьютеры
"Мировой рынок акций упал..."	Экономика


---


**2. Подготовить данные:**

- Токенизация и лемматизация ( желательно )

- Убрать стоп-слова

- Преобразовать тексты в числовые векторы с помощью TF-IDF
---
**3. Обучить классификатор:**

Пример: логистическая регрессия или случайный лес.
Используем sklearn.
"""